const API_URL = 'https://api.mail.tm';

let authToken = '';
let emailAddress = '';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function randomString(length = 8) {
    return Math.random().toString(36).substring(2, 2 + length);
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
function copyToClipboard(text, btn) {
    navigator.clipboard.writeText(text).then(() => {
        const original = btn.innerText;
        btn.innerText = '‚úÖ';
        setTimeout(() => btn.innerText = original, 1500);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
async function createAccount() {
    const generateBtn = document.getElementById('generateBtn');
    generateBtn.disabled = true;
    generateBtn.innerText = '–°–æ–∑–¥–∞—ë–º...';

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        const domainsRes = await fetch(`${API_URL}/domains`);
        if (!domainsRes.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω—ã');

        const domains = await domainsRes.json();
        const domain = domains['hydra:member'][0].domain;

        // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const localPart = randomString(10);
        const password = randomString(12);
        const fullEmail = `${localPart}@${domain}`;

        // 3. –°–æ–∑–¥–∞—ë–º –∞–∫–∫–∞—É–Ω—Ç
        const accountRes = await fetch(`${API_URL}/accounts`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                address: fullEmail,
                password: password
            })
        });

        if (!accountRes.ok) {
            const err = await accountRes.json();
            throw new Error(err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞');
        }

        // 4. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        const tokenRes = await fetch(`${API_URL}/token`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                address: fullEmail,
                password: password
            })
        });

        const tokenData = await tokenRes.json();
        authToken = tokenData.token;
        emailAddress = fullEmail;

        // 5. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        document.getElementById('emailAddress').innerText = fullEmail;
        document.getElementById('emailPassword').innerText = password;
        document.getElementById('emailBox').classList.remove('hidden');

        // 6. –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('copyEmail').onclick = () => copyToClipboard(fullEmail, document.getElementById('copyEmail'));
        document.getElementById('copyPass').onclick = () => copyToClipboard(password, document.getElementById('copyPass'));

        // 7. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞
        loadMessages();
        setInterval(loadMessages, 5000);

    } catch (err) {
        alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
        console.error(err);
    } finally {
        generateBtn.disabled = false;
        generateBtn.innerText = '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ—á—Ç—É';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º
async function loadMessages() {
    if (!authToken) return;

    try {
        const res = await fetch(`${API_URL}/messages`, {
            headers: { 'Authorization': `Bearer ${authToken}` }
        });

        if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–∞');

        const data = await res.json();
        const messagesDiv = document.getElementById('messages');

        if (!data['hydra:member'] || data['hydra:member'].length === 0) {
            messagesDiv.innerHTML = '<p>üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º.</p>';
            return;
        }

        messagesDiv.innerHTML = '';
        data['hydra:member'].reverse().forEach(msg => {
            const div = document.createElement('div');
            div.className = 'message';
            const date = new Date(msg.createdAt).toLocaleString('ru-RU');
            div.innerHTML = `
                <h4>${msg.subject || '–ë–µ–∑ —Ç–µ–º—ã'}</h4>
                <p><strong>üì§ –û—Ç:</strong> ${msg.from?.address || '–ê–Ω–æ–Ω–∏–º'}</p>
                <p><strong>üìÖ –î–∞—Ç–∞:</strong> ${date}</p>
                <p><strong>üìù –¢–µ–∫—Å—Ç:</strong> ${msg.intro ? msg.intro.substring(0, 150) + (msg.intro.length > 150 ? '...' : '') : '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}</p>
            `;
            messagesDiv.appendChild(div);
        });

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º:', err);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('generateBtn').addEventListener('click', createAccount);
});
